// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	wgtypes "golang.zx2c4.com/wireguard/wgctrl/wgtypes"
)

// WireGuardClient is an autogenerated mock type for the WireGuardClient type
type WireGuardClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *WireGuardClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfigureDevice provides a mock function with given fields: name, cfg
func (_m *WireGuardClient) ConfigureDevice(name string, cfg wgtypes.Config) error {
	ret := _m.Called(name, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, wgtypes.Config) error); ok {
		r0 = rf(name, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Device provides a mock function with given fields: name
func (_m *WireGuardClient) Device(name string) (*wgtypes.Device, error) {
	ret := _m.Called(name)

	var r0 *wgtypes.Device
	if rf, ok := ret.Get(0).(func(string) *wgtypes.Device); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wgtypes.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Devices provides a mock function with given fields:
func (_m *WireGuardClient) Devices() ([]*wgtypes.Device, error) {
	ret := _m.Called()

	var r0 []*wgtypes.Device
	if rf, ok := ret.Get(0).(func() []*wgtypes.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*wgtypes.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
